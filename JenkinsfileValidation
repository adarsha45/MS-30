#!groovy

import groovy.json.JsonSlurperClassic

node {

    def SERVER_KEY_CREDENTALS_ID = env.SERVER_KEY_CREDENTALS_ID
    def SF_INSTANCE_URL = "https://test.salesforce.com"
    def SF_CONSUMER_KEY= '3MVG9oZtFCVWuSwOgnZa__voKuQTg9L2_LLfPQbldA_5bgzpEkeo7ecAvVn2REsAPNukZeMkvnjRvCuLYHtVu'
    def SF_USERNAME= 'sophiya.maharjan@anujplayv12.com'
    def PACKAGE_PATH = 'force-app'


    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------

    stage('checkout source') {
        checkout scm
    }


    // -------------------------------------------------------------------------
    // Run all the enclosed stages with access to the Salesforce
    // JWT key credentials.
    // -------------------------------------------------------------------------
    
    //withEnv(["HOME=${env.WORKSPACE}"]) {
        
        withCredentials([file(credentialsId: SERVER_KEY_CREDENTALS_ID, variable: 'server_key_file')]) {

            -------------------------------------------------------------------------
            Authorize the Dev Hub org with JWT key and give it an alias.
            -------------------------------------------------------------------------

            stage('Authorize DevHub') {
                 try {
                sh "sfdx force:auth:logout --targetusername ${DEFAULT_DEVHUB_USERS} --noprompt"

            } catch (Exception e) {
                //continue if no org exists to logout
            }
                sh "sfdx auth:jwt:grant --instanceurl ${SF_INSTANCE_URL} --clientid ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwtkeyfile 'sfdx-source/server.key' --setdefaultdevhubusername --setalias HubOrg"
            }

            // -------------------------------------------------------------------------
            // Push source to Sandbox.
            // -------------------------------------------------------------------------

            stage('Push To Sandbox') {
               try{
               //sh "sfdx force:source:deploy -p ${PACKAGE_PATH} --targetusername ${SF_USERNAME} --testlevel RunLocalTests -c"
                sh "cd sfdx-source/ && sfdx force:source:deploy --checkonly --sourcepath force-app --targetusername HubOrg --testlevel RunLocalTests"
                  }catch(exception){
                // Since we are using try..catch block have to fail the build manually
                currentBuild.result = "FAILED"
                throw exception
            }//finally{
            //     // Send email to the culprits
            //     emailext (
            //         subject: '${DEFAULT_SUBJECT}', 
            //         attachLog: true,
            //         compressLog: true,
            //         to: '$DEFAULT_RECIPIENTS',
            //         recipientProviders: [
            //             [$class: 'CulpritsRecipientProvider'], 
            //             [$class: 'DevelopersRecipientProvider'],
            //             [$class: 'FirstFailingBuildSuspectsRecipientProvider']
            //         ], 
            //         body: '${DEFAULT_CONTENT}'
            //     )
            // }
            }          

        }


        //}
    }


def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }
}
